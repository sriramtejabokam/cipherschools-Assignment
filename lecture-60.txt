import java.util.*;

public class DepthFirstSearch {

    public static void dfs(int startVertex, Map<Integer, List<Integer>> graph) {
        Set<Integer> visited = new HashSet<>();
        dfsRecursive(startVertex, graph, visited);
    }

    private static void dfsRecursive(int vertex, Map<Integer, List<Integer>> graph, Set<Integer> visited) {
        visited.add(vertex);
        System.out.print(vertex + " ");

        List<Integer> neighbors = graph.get(vertex);
        if (neighbors != null) {
            for (int neighbor : neighbors) {
                if (!visited.contains(neighbor)) {
                    dfsRecursive(neighbor, graph, visited);
                }
            }
        }
    }

    public static void main(String[] args) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        graph.put(0, Arrays.asList(1, 2));
        graph.put(1, Arrays.asList(0, 3, 4));
        graph.put(2, Arrays.asList(0, 4));
        graph.put(3, Arrays.asList(1));
        graph.put(4, Arrays.asList(1, 2));

        System.out.println("Depth First Search starting from vertex 0:");
        dfs(0, graph);
    }
}
